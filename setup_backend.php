<?php
/**
 * Zed-Memes Backend Setup Script
 * Helps configure and install the backend
 */

echo "üöÄ Zed-Memes Backend Setup\n";
echo "==========================\n\n";

// Check PHP version
if (version_compare(PHP_VERSION, '7.4.0', '<')) {
    echo "‚ùå Error: PHP 7.4 or higher is required. Current version: " . PHP_VERSION . "\n";
    exit(1);
}

echo "‚úÖ PHP version: " . PHP_VERSION . "\n";

// Check required extensions
$required_extensions = ['pdo_mysql', 'gd', 'json', 'openssl', 'fileinfo'];
$missing_extensions = [];

foreach ($required_extensions as $ext) {
    if (!extension_loaded($ext)) {
        $missing_extensions[] = $ext;
    }
}

if (!empty($missing_extensions)) {
    echo "‚ùå Missing required PHP extensions: " . implode(', ', $missing_extensions) . "\n";
    echo "Please install these extensions and try again.\n";
    exit(1);
}

echo "‚úÖ All required PHP extensions are installed\n";

// Create directories
$directories = [
    'assets/images',
    'assets/uploads',
    'logs',
    'cache',
    'backups',
    'reports'
];

echo "\nüìÅ Creating directories...\n";
foreach ($directories as $dir) {
    if (!is_dir($dir)) {
        if (mkdir($dir, 0755, true)) {
            echo "‚úÖ Created: {$dir}\n";
        } else {
            echo "‚ùå Failed to create: {$dir}\n";
        }
    } else {
        echo "‚ÑπÔ∏è  Directory exists: {$dir}\n";
    }
}

// Database configuration
echo "\nüóÑÔ∏è  Database Configuration\n";
echo "==========================\n";

function custom_readline($prompt) {
    echo $prompt;
    $handle = fopen("php://stdin", "r");
    $line = fgets($handle);
    fclose($handle);
    return trim($line);
}

$db_host = custom_readline("Database host (default: localhost): ") ?: 'localhost';
$db_name = custom_readline("Database name (default: zed_memes): ") ?: 'zed_memes';
$db_user = custom_readline("Database username (default: root): ") ?: 'root';
$db_pass = custom_readline("Database password: ");

// Test database connection
echo "\nüîç Testing database connection...\n";
try {
    $pdo = new PDO("mysql:host={$db_host}", $db_user, $db_pass);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    echo "‚úÖ Database connection successful\n";
} catch (PDOException $e) {
    echo "‚ùå Database connection failed: " . $e->getMessage() . "\n";
    exit(1);
}

// Create database if it doesn't exist
echo "\nüóÑÔ∏è  Creating database...\n";
try {
    $pdo->exec("CREATE DATABASE IF NOT EXISTS `{$db_name}` CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci");
    echo "‚úÖ Database '{$db_name}' created/verified\n";
} catch (PDOException $e) {
    echo "‚ùå Failed to create database: " . $e->getMessage() . "\n";
    exit(1);
}

// Import schema
echo "\nüìã Importing database schema...\n";
$schema_file = 'database/schema/zed_memes.sql';
if (!file_exists($schema_file)) {
    echo "‚ùå Schema file not found: {$schema_file}\n";
    exit(1);
}

try {
    $sql = file_get_contents($schema_file);
    $sql = str_replace('USE zed_memes;', "USE `{$db_name}`;", $sql);
    
    // Split SQL into individual statements
    $statements = explode(';', $sql);
    
    foreach ($statements as $statement) {
        $statement = trim($statement);
        if (!empty($statement) && !preg_match('/^(--|#)/', $statement)) {
            try {
                $pdo->exec($statement);
            } catch (PDOException $e) {
                // Ignore errors for existing tables
                if (strpos($e->getMessage(), 'already exists') === false) {
                    echo "‚ö†Ô∏è  SQL warning: " . $e->getMessage() . "\n";
                }
            }
        }
    }
    
    echo "‚úÖ Database schema imported successfully\n";
} catch (Exception $e) {
    echo "‚ùå Failed to import schema: " . $e->getMessage() . "\n";
    exit(1);
}

// Create configuration file
echo "\n‚öôÔ∏è  Creating configuration file...\n";
$config_template = '<?php
/**
 * Zed-Memes Backend Configuration
 * Generated by setup script
 */

// Application settings
define("APP_NAME", "Zed-Memes Backend");
define("APP_VERSION", "1.0.0");
define("APP_ENV", getenv("APP_ENV") ?: "development");
define("APP_DEBUG", APP_ENV === "development");

// Database settings
define("DB_HOST", "' . $db_host . '");
define("DB_NAME", "' . $db_name . '");
define("DB_USER", "' . $db_user . '");
define("DB_PASS", "' . $db_pass . '");
define("DB_CHARSET", "utf8mb4");
define("DB_PORT", getenv("DB_PORT") ?: 3306);

// JWT settings
define("JWT_SECRET", getenv("JWT_SECRET") ?: "' . bin2hex(random_bytes(32)) . '");
define("JWT_EXPIRY", 24 * 60 * 60); // 24 hours in seconds
define("JWT_ALGORITHM", "HS256");

// Upload settings
define("UPLOAD_MAX_SIZE", 5 * 1024 * 1024); // 5MB
define("UPLOAD_ALLOWED_TYPES", ["image/jpeg", "image/jpg", "image/png", "image/gif"]);
define("UPLOAD_MAX_WIDTH", 1920);
define("UPLOAD_MAX_HEIGHT", 1080);
define("UPLOAD_DIR", __DIR__ . "/../../assets/images/");
define("UPLOAD_TEMP_DIR", __DIR__ . "/../../assets/uploads/");

// Security settings
define("PASSWORD_MIN_LENGTH", 8);
define("USERNAME_MIN_LENGTH", 3);
define("USERNAME_MAX_LENGTH", 50);
define("COMMENT_MAX_LENGTH", 500);
define("TITLE_MAX_LENGTH", 100);
define("MAX_LOGIN_ATTEMPTS", 5);
define("LOGIN_LOCKOUT_TIME", 15 * 60); // 15 minutes

// Pagination settings
define("MEMES_PER_PAGE", 12);
define("COMMENTS_PER_PAGE", 10);
define("MAX_SEARCH_RESULTS", 20);

// API settings
define("API_RATE_LIMIT", 100); // requests per minute
define("API_RATE_LIMIT_WINDOW", 60); // seconds

// Error reporting
if (APP_DEBUG) {
    error_reporting(E_ALL);
    ini_set("display_errors", 1);
} else {
    error_reporting(0);
    ini_set("display_errors", 0);
}

// Timezone
date_default_timezone_set("UTC");

// Session settings
ini_set("session.cookie_httponly", 1);
ini_set("session.use_only_cookies", 1);
if (APP_ENV === "production") {
    ini_set("session.cookie_secure", 1);
}

// CORS settings
header("Access-Control-Allow-Origin: *");
header("Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS");
header("Access-Control-Allow-Headers: Content-Type, Authorization, X-Requested-With");

// Handle preflight requests
if ($_SERVER["REQUEST_METHOD"] === "OPTIONS") {
    http_response_code(200);
    exit();
}

// Helper functions
function isProduction() {
    return APP_ENV === "production";
}

function isDevelopment() {
    return APP_ENV === "development";
}

function isTesting() {
    return APP_ENV === "testing";
}

function getAppUrl() {
    return getenv("APP_URL") ?: "http://localhost/Zed-Memes";
}

function getUploadDir() {
    return UPLOAD_DIR;
}

function getTempUploadDir() {
    return UPLOAD_TEMP_DIR;
}

function validateImageFile($file) {
    $finfo = finfo_open(FILEINFO_MIME_TYPE);
    $mimeType = finfo_file($finfo, $file["tmp_name"]);
    finfo_close($finfo);
    
    return in_array($mimeType, UPLOAD_ALLOWED_TYPES);
}

function sanitizeInput($input) {
    return htmlspecialchars(trim($input), ENT_QUOTES, "UTF-8");
}

function generateRandomString($length = 32) {
    return bin2hex(random_bytes($length / 2));
}

function logError($message, $context = []) {
    $logFile = __DIR__ . "/../../logs/error.log";
    $logDir = dirname($logFile);
    
    if (!is_dir($logDir)) {
        mkdir($logDir, 0755, true);
    }
    
    $timestamp = date("Y-m-d H:i:s");
    $contextStr = !empty($context) ? " " . json_encode($context) : "";
    $logEntry = "[{$timestamp}] {$message}{$contextStr}" . PHP_EOL;
    
    file_put_contents($logFile, $logEntry, FILE_APPEND | LOCK_EX);
}

function logInfo($message, $context = []) {
    if (APP_DEBUG) {
        $logFile = __DIR__ . "/../../logs/info.log";
        $logDir = dirname($logFile);
        
        if (!is_dir($logDir)) {
            mkdir($logDir, 0755, true);
        }
        
        $timestamp = date("Y-m-d H:i:s");
        $contextStr = !empty($context) ? " " . json_encode($context) : "";
        $logEntry = "[{$timestamp}] {$message}{$contextStr}" . PHP_EOL;
        
        file_put_contents($logFile, $logEntry, FILE_APPEND | LOCK_EX);
    }
}

function validateEmail($email) {
    return filter_var($email, FILTER_VALIDATE_EMAIL) !== false;
}

function validatePassword($password) {
    return strlen($password) >= PASSWORD_MIN_LENGTH &&
           preg_match("/[A-Z]/", $password) &&
           preg_match("/[a-z]/", $password) &&
           preg_match("/[0-9]/", $password);
}

function validateUsername($username) {
    return strlen($username) >= USERNAME_MIN_LENGTH &&
           strlen($username) <= USERNAME_MAX_LENGTH &&
           preg_match("/^[a-zA-Z0-9_]+$/", $username);
}
?>';

$config_file = 'backend/config/config.php';
if (file_put_contents($config_file, $config_template)) {
    echo "‚úÖ Configuration file created: {$config_file}\n";
} else {
    echo "‚ùå Failed to create configuration file\n";
    exit(1);
}

// Test the configuration
echo "\nüß™ Testing configuration...\n";
try {
    require_once $config_file;
    echo "‚úÖ Configuration loaded successfully\n";
} catch (Exception $e) {
    echo "‚ùå Configuration error: " . $e->getMessage() . "\n";
    exit(1);
}

// Run tests
echo "\nüß™ Running tests...\n";
if (file_exists('run_tests.php')) {
    $output = shell_exec('php run_tests.php 2>&1');
    echo $output;
    
    if (strpos($output, 'All tests passed') !== false) {
        echo "‚úÖ All tests passed!\n";
    } else {
        echo "‚ö†Ô∏è  Some tests failed. Check the output above.\n";
    }
} else {
    echo "‚ÑπÔ∏è  Test runner not found. Skipping tests.\n";
}

// Create .htaccess for Apache
echo "\nüåê Creating .htaccess file...\n";
$htaccess_content = 'RewriteEngine On
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule ^api/(.*)$ backend/api/$1 [QSA,L]

# Security headers
Header always set X-Content-Type-Options nosniff
Header always set X-Frame-Options DENY
Header always set X-XSS-Protection "1; mode=block"

# Cache control for static assets
<FilesMatch "\.(css|js|png|jpg|jpeg|gif|ico|svg)$">
    // ExpiresActive On
    ExpiresDefault "access plus 1 month"
</FilesMatch>';

if (file_put_contents('.htaccess', $htaccess_content)) {
    echo "‚úÖ .htaccess file created\n";
} else {
    echo "‚ö†Ô∏è  Failed to create .htaccess file\n";
}

// Final summary
echo "\nüéâ Setup Complete!\n";
echo "==================\n";
echo "‚úÖ Backend has been successfully configured\n";
echo "‚úÖ Database schema imported\n";
echo "‚úÖ Configuration file created\n";
echo "‚úÖ Directories created\n";
echo "‚úÖ Tests run\n\n";

echo "üìã Next Steps:\n";
echo "1. Configure your web server (Apache/Nginx)\n";
echo "2. Set up environment variables for production\n";
echo "3. Test the API endpoints\n";
echo "4. Review the documentation in backend/README.md\n\n";

echo "üîó Useful Commands:\n";
echo "- Run tests: php run_tests.php\n";
echo "- Run specific test suite: php run_tests.php suite Auth\n";
echo "- List available tests: php run_tests.php list\n\n";

echo "üìö Documentation: backend/README.md\n";
echo "üÜò For help, check the documentation or create an issue\n\n";

echo "Happy coding! üöÄ\n";
?> 